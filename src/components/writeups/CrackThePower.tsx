import Image from 'next/image'

export default function CrackThePower() {
  return (
    <div className="space-y-8">
      {/* Header Section */}
      <div className="bg-gradient-to-r from-yellow-50 to-orange-100 rounded-2xl p-8 border-l-4 border-yellow-500">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">Crack the Power</h1>
        <p className="text-xl text-gray-700 leading-relaxed">
          We received an encrypted message. The modulus is built from primes large enough that factoring them isn't an option, 
          at least not today. See if you can make sense of the numbers and reveal the flag.
        </p>
      </div>

      {/* Information Section */}
      <div className="bg-white rounded-xl shadow-lg p-8 border border-gray-200">
        <h2 className="text-3xl font-bold text-blue-900 mb-6 border-l-4 border-blue-500 pl-4">Information Given</h2>
        
        <div className="space-y-6">
          <div>
            <h3 className="text-2xl font-bold text-green-700 mb-4">Description</h3>
            <p className="text-gray-700 leading-relaxed text-lg">
              We received an encrypted message. The modulus is built from primes large enough that factoring them isn't an option, 
              at least not today. See if you can make sense of the numbers and reveal the flag.
            </p>
            <p className="mt-4">
              Download the <a href="https://challenge-files.picoctf.net/c_amiable_citadel/f8301c52de77777b21934124245535e3672ea83b3d1976fc984c0affd45dba6f/message.txt" className="text-blue-600 hover:text-blue-800 font-semibold" target="_blank" rel="noopener noreferrer">message</a>.
            </p>
          </div>

          <div>
            <h3 className="text-2xl font-bold text-green-700 mb-4">Hints</h3>
            <ul className="space-y-2 text-gray-700">
              <li>• When certain values in the encryption setup are smaller than usual, it opens up unexpected shortcuts to recover the plaintext</li>
              <li>• Consider whether you can invert the encryption without factoring <code className="bg-gray-100 text-gray-800 px-2 py-1 rounded font-mono">n</code></li>
              <li>• Read more about <a href="https://en.wikipedia.org/wiki/Coppersmith's_attack" className="text-blue-600 hover:text-blue-800 font-semibold" target="_blank" rel="noopener noreferrer">Coppersmith's attack</a></li>
            </ul>
          </div>
        </div>
      </div>

      {/* Message Section */}
      <div className="bg-gradient-to-br from-gray-900 to-gray-800 rounded-xl p-8 text-green-400 shadow-2xl">
        <h2 className="text-3xl font-bold text-white mb-6">Message</h2>
        
        <div className="space-y-6">
          <p className="text-green-300 text-lg">
            We received an encrypted message. See if you can make sense of the numbers and reveal the flag.
          </p>
          
          <p className="text-green-300 text-lg">
            We are given:
          </p>
          
          <p className="text-green-300 text-lg">
            We're given an RSA encrypted message with the following parameters:
          </p>
          
          <ul className="text-green-300 space-y-2">
            <li>• <strong>n</strong>: A very large 2048-bit modulus</li>
            <li>• <strong>e</strong>: 20 (unusually small public exponent)</li>
            <li>• <strong>c</strong>: The ciphertext</li>
          </ul>
          
          <div className="bg-gray-800 rounded-lg p-6 overflow-x-auto">
            <pre className="text-green-400 font-mono text-xs">
{`n = 410664186165191791402826020648772079727855370225121168329489558023676206903110917122249911944501914058167574154300515578639528319920053023867482073692484985287827372248686968550452147219495058219737726533198589146788106207104006141113375574066854852611259725786317821883172497842657985257908701482139090568993822965683214349918502719101583356882168338270447984584381812927858227415072514189838197665563968909219013964220237934124402478909876364171409578837503118525132848891505287317986848688438750873278654357181872934401664809196436196103395671068981692006881025785118124735403009761732676194557783341186696317289217601680762240946756099165359859285900990663149297784065325172930606950668533524438921457116354261722563783316401034088432522913099965625002265981169229586378601077820521982226216733874547440407450338648780337291742094848216093949046938054996321130253196977418170117347647315719448397122004966163394965123751185910309725139116961163368621449406198577849587926254211380551265442088456309106778455980283046226445371066856262215933615411567261989837352437927401685169541910706297673710978352664847844643089079402646094504545790754030992062817610552755382423490304761138904591244735268207666957111641348148546651263055711

e = 20

c = 640637430810406857500566702096274079868087131935153057078985716461078483409793615804311883296591203324452249008450521032645267345512046769994383635285244380705157432625570066632528925314552900669814963219369331313157534607620352061314683496525883016843153241425770911702563380247302073740850825452371063276867610414725164654421304873071774234683226777641240092032528116047489137507373500064099947304524782898265669628686091404044097235795818651902023996906668123465373292221934136216954999213086853380479136606214034827032162211811911299453884553459883192781319337391984912950371275232374262114220706295073924345743106413419931715570201067076471272561731959500262271837841417300230554359594018424813861589485400512131504027368400263321851762034719595379735999122340323973277638235482616225404363214027767922993075345559200374830345517529445328472713066257434684134913873359589576414681791333170123047390862933633440111883394760439698156048278154619895786259579727797488066274962774692244105308866923365722966155030681035814505674226605348055192323888099731031683511808581367884577911318683020417249790405911629045010877656025044271667195964670746001`}
            </pre>
          </div>
        </div>
      </div>

      {/* Solve Script Section */}
      <div className="bg-white rounded-xl shadow-lg p-8 border border-gray-200">
        <h2 className="text-3xl font-bold text-blue-900 mb-6 border-l-4 border-blue-500 pl-4">Solve Script</h2>
        <div className="bg-gradient-to-br from-gray-900 to-gray-800 rounded-xl p-6 text-green-400 font-mono shadow-2xl">
          <pre className="text-sm overflow-x-auto">
{`from gmpy2 import iroot

# Given values
n = 410664186165191791402826020648772079727855370225121168329489558023676206903110917122249911944501914058167574154300515578639528319920053023867482073692484985287827372248686968550452147219495058219737726533198589146788106207104006141113375574066854852611259725786317821883172497842657985257908701482139090568993822965683214349918502719101583356882168338270447984584381812927858227415072514189838197665563968909219013964220237934124402478909876364171409578837503118525132848891505287317986848688438750873278654357181872934401664809196436196103395671068981692006881025785118124735403009761732676194557783341186696317289217601680762240946756099165359859285900990663149297784065325172930606950668533524438921457116354261722563783316401034088432522913099965625002265981169229586378601077820521982226216733874547440407450338648780337291742094848216093949046938054996321130253196977418170117347647315719448397122004966163394965123751185910309725139116961163368621449406198577849587926254211380551265442088456309106778455980283046226445371066856262215933615411567261989837352437927401685169541910706297673710978352664847844643089079402646094504545790754030992062817610552755382423490304761138904591244735268207666957111641348148546651263055711

e = 20

c = 640637430810406857500566702096274079868087131935153057078985716461078483409793615804311883296591203324452249008450521032645267345512046769994383635285244380705157432625570066632528925314552900669814963219369331313157534607620352061314683496525883016843153241425770911702563380247302073740850825452371063276867610414725164654421304873071774234683226777641240092032528116047489137507373500064099947304524782898265669628686091404044097235795818651902023996906668123465373292221934136216954999213086853380479136606214034827032162211811911299453884553459883192781319337391984912950371275232374262114220706295073924345743106413419931715570201067076471272561731959500262271837841417300230554359594018424813861589485400512131504027368400263321851762034719595379735999122340323973277638235482616225404363214027767922993075345559200374830345517529445328472713066257434684134913873359589576414681791333170123047390862933633440111883394760439698156048278154619895786259579727797488066274962774692244105308866923365722966155030681035814505674226605348055192323888099731031683511808581367884577911318683020417249790405911629045010877656025044271667195964670746001

# Direct root extraction attack
m, is_exact_root = iroot(c, e)

if is_exact_root:
    # Convert to bytes and decode
    flag_bytes = m.to_bytes((m.bit_length() + 7) // 8, 'big')
    flag = flag_bytes.decode('ascii')
    print(f"Flag: {flag}")
else:
    print("Direct root failed - would need Coppersmith's attack")`}
          </pre>
        </div>
        <p className="mt-4 text-gray-700">
          To be able to run this:
        </p>
        <div className="bg-gray-100 rounded-lg p-4 font-mono text-sm">
          <code>pip install gmpy2</code>
        </div>
        <p className="mt-4 text-gray-700">
          This leaves us with the flag: <code className="bg-gray-100 text-gray-800 px-2 py-1 rounded font-mono">{"picoCTF{" + "t1ny_e_381870dd" + "}"}</code>
        </p>
      </div>

      {/* Flag Section */}
      <div className="bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl p-8 border-l-4 border-green-500">
        <h2 className="text-3xl font-bold text-green-800 mb-6">The Flag</h2>
        <div className="bg-gradient-to-r from-green-600 to-emerald-600 text-white p-6 rounded-xl font-mono text-xl font-bold shadow-lg">
          {"picoCTF{" + "'{'" + "}"}t1ny_e_381870dd{'}'}
        </div>
      </div>
    </div>
  )
}
